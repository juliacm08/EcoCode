// EcoQuiz - Vers√£o Simplificada baseada no GeeksforGeeks
// https://www.geeksforgeeks.org/javascript/how-to-create-a-simple-javascript-quiz/
// ID's dos elementos que deve ter no HTML para funcionar o quiz
//const ques = document.getElementById("ques");
//const opt = document.getElementById("opt");
//const btn = document.getElementById("btn");
//const totalScore = document.getElementById("score");

let Questions = [];
const ques = document.getElementById("ques");
let isProcessing = false; // Prevenir m√∫ltiplos cliques

function decodeHtmlEntities(text) {
    if (!text) return '';
    
    return text
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#039;/g, "'")
        .replace(/&pi;/g, 'œÄ')
        .replace(/&copy;/g, '¬©')
        .replace(/&reg;/g, '¬Æ')
        .replace(/&trade;/g, '‚Ñ¢')
        .replace(/&nbsp;/g, ' ')
        .replace(/&hellip;/g, '‚Ä¶')
        .replace(/&mdash;/g, '‚Äî')
        .replace(/&ndash;/g, '‚Äì')
        .replace(/&lsquo;/g, "'")
        .replace(/&rsquo;/g, "'")
        .replace(/&ldquo;/g, '"')
        .replace(/&rdquo;/g, '"')
        .replace(/&times;/g, '√ó')
        .replace(/&divide;/g, '√∑')
        .replace(/&plusmn;/g, '¬±')
        .replace(/&deg;/g, '¬∞')
        .replace(/&sup2;/g, '¬≤')
        .replace(/&sup3;/g, '¬≥')
        .replace(/&frac12;/g, '¬Ω')
        .replace(/&frac14;/g, '¬º')
        .replace(/&frac34;/g, '¬æ')
        .replace(/&micro;/g, '¬µ')
        .replace(/&#(\d+);/g, (match, dec) => String.fromCharCode(dec)) // Decodificar c√≥digos num√©ricos
        .replace(/&#x([0-9a-fA-F]+);/g, (match, hex) => String.fromCharCode(parseInt(hex, 16))); // Decodificar c√≥digos hexadecimais
}

// SISTEMA DE TRADU√á√ÉO LOCAL SIMPLES E CONFI√ÅVEL
let translationCache = {};

// Fun√ß√£o para tradu√ß√£o com MyMemory (gratuita, sem chave)
async function translateWithMyMemory(text) {
    try {
        console.log('üîÑ MyMemory: Iniciando tradu√ß√£o...');
        
        // Verificar limite de 500 bytes conforme documenta√ß√£o oficial
        const textBytes = new TextEncoder().encode(text).length;
        if (textBytes > 500) {
            console.log(`‚ö†Ô∏è MyMemory: Texto muito longo (${textBytes} bytes > 500 bytes)`);
            return null;
        }
        
        // URL conforme documenta√ß√£o oficial: https://mymemory.translated.net/doc/spec.php
        const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|pt`;
        
        console.log('üì§ URL MyMemory:', url);
        
        const response = await fetch(url);
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìã Resposta MyMemory:', data);
            
            if (data.responseData && data.responseData.translatedText) {
                console.log('‚úÖ MyMemory sucesso:', data.responseData.translatedText);
                return data.responseData.translatedText;
            } else if (data.responseStatus === 403) {
                console.log('‚ùå MyMemory: Rate limit atingido');
            } else {
                console.log('‚ùå MyMemory: Resposta inv√°lida');
            }
        } else {
            console.log('‚ùå MyMemory HTTP error:', response.status);
        }
        
        return null;
    } catch (error) {
        console.log('üí• MyMemory erro:', error);
        return null;
    }
}

// Fun√ß√£o para tradu√ß√£o com Lingva Translate (gratuita, sem chave)
async function translateWithLingva(text) {
    try {
        console.log('üîÑ Lingva: Iniciando tradu√ß√£o...');
        
        const url = `https://lingva.ml/api/v1/en/pt/${encodeURIComponent(text)}`;
        
        const response = await fetch(url);
        
        if (response.ok) {
            const data = await response.json();
            if (data.translation) {
                console.log('‚úÖ Lingva sucesso:', data.translation);
                return data.translation;
            }
        }
        
        console.log('‚ùå Lingva falhou');
        return null;
    } catch (error) {
        console.log('üí• Lingva erro:', error);
        return null;
    }
}

// Fun√ß√£o para tradu√ß√£o com Yandex (gratuita, sem chave)
async function translateWithYandex(text) {
    try {
        console.log('üîÑ Yandex: Iniciando tradu√ß√£o...');
        
        // URL correta para Yandex Translate
        const url = `https://translate.yandex.net/api/v1/tr.json/translate?text=${encodeURIComponent(text)}&lang=en-pt&format=plain`;
        
        console.log('üì§ URL Yandex:', url);
        
        const response = await fetch(url);
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìã Resposta Yandex:', data);
            
            if (data.text && data.text[0]) {
                console.log('‚úÖ Yandex sucesso:', data.text[0]);
                return data.text[0];
            } else {
                console.log('‚ùå Yandex: Resposta inv√°lida');
            }
        } else {
            console.log('‚ùå Yandex HTTP error:', response.status);
        }
        
        return null;
    } catch (error) {
        console.log('üí• Yandex erro:', error);
        return null;
    }
}

// Fun√ß√£o para tradu√ß√£o com LibreTranslate (gratuita, sem chave)
async function translateWithLibre(text) {
    try {
        console.log('üîÑ LibreTranslate: Iniciando tradu√ß√£o...');
        
        // Verificar se o texto √© v√°lido
        if (!text || text.trim() === '') {
            console.log('‚ö†Ô∏è Texto vazio ou inv√°lido para tradu√ß√£o');
            return null;
        }
        
        // Par√¢metros corretos para a API LibreTranslate
        const requestBody = {
            q: text.trim(),
            source: 'en',
            target: 'pt'
        };
        
        console.log('üì§ Enviando requisi√ß√£o:', requestBody);
        
        const response = await fetch('https://libretranslate.com/translate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì• Resposta recebida:', response.status, response.statusText);
        
        if (response.ok) {
            const data = await response.json();
            if (data.translatedText) {
                console.log('‚úÖ LibreTranslate sucesso:', data.translatedText);
                return data.translatedText;
            }
        }
        
        console.log('‚ùå LibreTranslate falhou');
        return null;
    } catch (error) {
        console.log('üí• LibreTranslate erro:', error);
        return null;
    }
}

// Fun√ß√£o principal de tradu√ß√£o - SISTEMA DE FALLBACK AUTOM√ÅTICO
async function translate(text) {
    if (!text || text.trim() === '') {
        return text;
    }
    
    const decodedText = decodeHtmlEntities(text);
    
    // Verificar cache primeiro
    if (translationCache[decodedText]) {
        console.log('‚úÖ Cache hit:', translationCache[decodedText]);
        return translationCache[decodedText];
    }
    
    // Se j√° parece estar em portugu√™s, retornar como est√°
    if (isPortuguese(decodedText)) {
        translationCache[decodedText] = decodedText;
        return decodedText;
    }
    
    console.log(`üîÑ Traduzindo: "${decodedText}"`);
    
    // SISTEMA DE FALLBACK AUTOM√ÅTICO - Tenta todas as APIs em ordem
    const apis = [
        { name: 'MyMemory', func: translateWithMyMemory },
        { name: 'Lingva', func: translateWithLingva },
        { name: 'Yandex', func: translateWithYandex },
        { name: 'LibreTranslate', func: translateWithLibre }
    ];
    
    for (const api of apis) {
        try {
            console.log(`üéØ Tentando ${api.name}...`);
            const result = await api.func(decodedText);
            
            if (result && result.trim() !== '' && result !== decodedText) {
                console.log(`‚úÖ ${api.name} bem-sucedido:`, result);
                translationCache[decodedText] = result;
                return result;
            }
        } catch (error) {
            console.log(`‚ùå ${api.name} falhou:`, error.message);
        }
        
        // Aguardar um pouco entre as tentativas
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // Se todas as APIs falharem, usar texto original
    console.log('‚ö†Ô∏è Todas as APIs falharam, usando texto original');
    translationCache[decodedText] = decodedText;
    return decodedText;
}

// Fun√ß√£o para detectar portugu√™s - SIMPLIFICADA
function isPortuguese(text) {
    const lowerText = text.toLowerCase();
    
    // Palavras espec√≠ficas em portugu√™s que indicam tradu√ß√£o
    const portugueseWords = [
        'qual', 'quem', 'como', 'quando', 'onde', 'por que', 'quantos',
        'planeta', 'estrela', 'c√©lula', 'cora√ß√£o', 'c√©rebro', 'temperatura',
        'energia', 'press√£o', 'hidrog√™nio', 'oxig√™nio', 'carbono',
        'aquecimento', 'global', 'efeito', 'estufa', 'combust√≠veis', 'f√≥sseis',
        'renov√°vel', 'mudan√ßa', 'clim√°tica', 'biodiversidade', 'desmatamento',
        'polui√ß√£o', 'sustentabilidade', 'ecossistema', 'fen√¥meno', 'natural',
        'chuva', '√°cida', 'painel', 'solar', 'carro', 'el√©trico', 'calotas',
        'polares', 'n√≠veis', 'mar', 'desertifica√ß√£o'
    ];
    
    const portugueseCount = portugueseWords.filter(word => 
        lowerText.includes(word)
    ).length;
    
    const wordCount = text.split(/\s+/).length;
    const portugueseRatio = portugueseCount / wordCount;
    
    // Threshold baixo para detec√ß√£o mais r√°pida
    return portugueseRatio > 0.2;
}

// Fun√ß√£o para limpar cache de tradu√ß√£o
function clearTranslationCache() {
    translationCache = {};
    console.log('üßπ Cache de tradu√ß√£o limpo!');
}

// Fun√ß√£o para testar tradu√ß√£o com m√∫ltiplas APIs
function testMultipleAPIs() {
    console.log('üß™ TESTANDO SISTEMA DE M√öLTIPLAS APIS...');
    console.log('=' .repeat(60));
    
    const testTexts = [
        "What is global warming?",
        "Which planet is the hottest?",
        "How does photosynthesis work?",
        "What causes acid rain?",
        "Which energy source is renewable?",
        "What is the unit of electrical resistance?",
        "What is the standard SI unit for temperature?",
        "Which natural phenomenon is responsible for global warming?",
        "Which gas is released by burning fossil fuels?",
        "Which energy source is NON-renewable?",
        "What is the hottest planet in the Solar System?",
        "How does photosynthesis work?",
        "What causes acid rain?"
    ];
    
    console.log('üéØ Sistema de tradu√ß√£o com m√∫ltiplas APIs (todas gratuitas, sem chave):');
    console.log('1Ô∏è‚É£ MyMemory - https://mymemory.translated.net/doc/spec.php');
    console.log('   ‚úÖ Limite: 500 bytes por requisi√ß√£o');
    console.log('   ‚úÖ Sem chave de API');
    console.log('   ‚úÖ Qualidade: Tradu√ß√µes humanas + Machine Translation');
    console.log('');
    console.log('2Ô∏è‚É£ Lingva Translate - https://lingva.ml/');
    console.log('   ‚úÖ Limite: Sem limite conhecido');
    console.log('   ‚úÖ Sem chave de API');
    console.log('   ‚úÖ Qualidade: N√£o oficial Google Translate');
    console.log('');
    console.log('3Ô∏è‚É£ Yandex Translate - https://translate.yandex.net/');
    console.log('   ‚úÖ Limite: Sem limite conhecido');
    console.log('   ‚úÖ Sem chave de API');
    console.log('   ‚úÖ Qualidade: Tradu√ß√£o profissional');
    console.log('');
    console.log('4Ô∏è‚É£ LibreTranslate - https://libretranslate.com/');
    console.log('   ‚úÖ Limite: Sem limite conhecido');
    console.log('   ‚úÖ Sem chave de API');
    console.log('   ‚úÖ Qualidade: Open source');
    console.log('');
    console.log('‚úÖ Cache inteligente para performance');
    console.log('‚úÖ Fallback autom√°tico se uma falhar');
    console.log('‚úÖ Logs detalhados para diagn√≥stico');
    console.log('');
    
    testTexts.forEach((text, index) => {
        const textBytes = new TextEncoder().encode(text).length;
        console.log(`\n--- Teste ${index + 1} ---`);
        console.log(`üìù Original: "${text}"`);
        console.log(`üìè Tamanho: ${textBytes} bytes ${textBytes > 500 ? '‚ö†Ô∏è (muito longo para MyMemory)' : '‚úÖ (OK para todas as APIs)'}`);
        console.log(`üîÑ Ser√° traduzido automaticamente por uma das APIs`);
    });
    
    console.log('\n‚úÖ Sistema de m√∫ltiplas APIs configurado com sucesso!');
    console.log('üöÄ M√∫ltiplas op√ß√µes + Cache + Fallback = M√°xima confiabilidade!');
}

// Fun√ß√£o para testar tradu√ß√£o completa com m√∫ltiplas APIs
async function testCompleteTranslation() {
    console.log('üß™ TESTANDO TRADU√á√ÉO COMPLETA COM M√öLTIPLAS APIS...');
    console.log('=' .repeat(60));
    
    const testTexts = [
        "What is global warming?",
        "How does photosynthesis work?",
        "What causes acid rain?"
    ];
    
    for (const text of testTexts) {
        console.log(`\n--- Traduzindo: "${text}" ---`);
        const translated = await translate(text);
        console.log(`‚úÖ Resultado final: "${translated}"`);
    }
    
    console.log('\nüéØ Sistema de m√∫ltiplas APIs testado com sucesso!');
}

// Fun√ß√£o para testar cada API individualmente
async function testIndividualAPIs() {
    console.log('üîç TESTANDO CADA API INDIVIDUALMENTE...');
    console.log('=' .repeat(60));
    
    const testText = "Hello world";
    console.log(`üìù Texto de teste: "${testText}"`);
    
    const apis = [
        { name: 'MyMemory', func: translateWithMyMemory },
        { name: 'Lingva', func: translateWithLingva },
        { name: 'Yandex', func: translateWithYandex },
        { name: 'LibreTranslate', func: translateWithLibre }
    ];
    
    for (const api of apis) {
        console.log(`\n--- Testando ${api.name} ---`);
        try {
            const result = await api.func(testText);
            if (result) {
                console.log(`‚úÖ ${api.name} funcionando: "${result}"`);
            } else {
                console.log(`‚ùå ${api.name} falhou`);
            }
        } catch (error) {
            console.log(`üí• ${api.name} erro:`, error.message);
        }
        
        // Aguardar entre os testes
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

// Fun√ß√£o para testar tradu√ß√µes espec√≠ficas do quiz
async function testQuizTranslations() {
    console.log('üéØ TESTANDO TRADU√á√ïES ESPEC√çFICAS DO QUIZ...');
    console.log('=' .repeat(50));
    
    const quizTexts = [
        "What is the unit of electrical resistance?",
        "What is the standard SI unit for temperature?",
        "Which natural phenomenon is responsible for global warming?",
        "Which gas is released by burning fossil fuels?",
        "Which energy source is NON-renewable?"
    ];
    
    for (const text of quizTexts) {
        console.log(`\n--- Teste ${quizTexts.indexOf(text) + 1} ---`);
        console.log(`üìù Original: "${text}"`);
        const translated = await translate(text);
        console.log(`‚úÖ Traduzido: "${translated}"`);
    }
    
    console.log('\nüéØ Tradu√ß√µes do quiz testadas com sucesso!');
}

// Fun√ß√£o para buscar perguntas da API Open Trivia DB
async function fetchQuestions() {
    // Perguntas personalizadas sobre meio ambiente (sempre inclu√≠das)
    const customQuestions = [
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which natural phenomenon is responsible for global warming by trapping heat in the atmosphere?",
            correct_answer: "Greenhouse effect",
            incorrect_answers: ["Ozone layer", "Photosynthesis", "Continental drift"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which gas is released by burning fossil fuels and contributes to acid rain?",
            correct_answer: "Sulfur dioxide (SO‚ÇÇ)",
            incorrect_answers: ["Oxygen (O‚ÇÇ)", "Carbon dioxide (CO‚ÇÇ)", "Nitrogen (N‚ÇÇ)"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which energy source is NON-renewable?",
            correct_answer: "Petroleum",
            incorrect_answers: ["Wind energy", "Solar energy", "Hydropower"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "What is the \"El Ni√±o\" phenomenon?",
            correct_answer: "Abnormal warming of Pacific Ocean waters",
            incorrect_answers: ["An underwater volcano", "A hurricane in the Atlantic", "An earthquake in the Ring of Fire"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which Brazilian biome is known for its high biodiversity and deforestation threats?",
            correct_answer: "Amazon Rainforest",
            incorrect_answers: ["Caatinga", "Cerrado", "Pampa"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "If a solar panel has 20% efficiency and receives 1000 W/m¬≤ of sunlight, how much electrical energy does it produce per m¬≤?",
            correct_answer: "200 W",
            incorrect_answers: ["20 W", "500 W", "1000 W"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "What is the main cause of rising sea levels?",
            correct_answer: "Melting polar ice caps and thermal expansion of water",
            incorrect_answers: ["Increased ocean evaporation", "Underwater earthquakes", "Sediment buildup in rivers"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which chemical reaction occurs in electric car batteries to store energy?",
            correct_answer: "Oxidation-reduction (redox)",
            incorrect_answers: ["Combustion", "Photolysis", "Neutralization"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "If Earth's albedo (reflectivity) decreases due to melting ice, what happens to global temperatures?",
            correct_answer: "Increases, because more light is absorbed",
            incorrect_answers: ["Decreases, because more light is reflected", "Remains unchanged", "Fluctuates randomly"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "Which human activity contributes most to desertification?",
            correct_answer: "Deforestation and intensive land use",
            incorrect_answers: ["Reforestation", "Sustainable agriculture", "Hydropower"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "What is the standard SI unit for temperature?",
            correct_answer: "Kelvin",
            incorrect_answers: ["Fahrenheit", "Celsius", "Rankine"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "What is the unit of electrical resistance?",
            correct_answer: "Ohm",
            incorrect_answers: ["Mho", "Tesla", "Joule"]
        },
        {
            type: "multiple",
            difficulty: "easy",
            category: "Science & Nature",
            question: "What is the hottest planet in the Solar System?",
            correct_answer: "Venus",
            incorrect_answers: ["Mars", "Mercury", "Jupiter"]
        }
    ];
    
    try {
        console.log('üîÑ Conectando com a Open Trivia DB...');
        const response = await fetch('https://opentdb.com/api.php?amount=10&category=17&difficulty=easy&type=multiple');
        if (!response.ok) {
            throw new Error("Erro na conex√£o! N√£o foi poss√≠vel buscar os dados");
        }
        const data = await response.json();
        
        // Combinar perguntas da API com perguntas personalizadas
        Questions = [...customQuestions, ...data.results];
        
        // Embaralhar todas as perguntas para maior variedade
        Questions.sort(() => Math.random() - 0.5);
        
        console.log(`‚úÖ ${Questions.length} perguntas carregadas com sucesso! (${customQuestions.length} personalizadas + ${data.results.length} da API)`);
    } catch (error) {
        console.log('‚ùå Erro:', error);
        ques.innerHTML = `<h5 style='color: red'>‚ùå Erro na conex√£o: ${error.message}</h5>`;
        
        // Usar apenas perguntas personalizadas se a API falhar
        Questions = customQuestions;
        
        // Embaralhar perguntas personalizadas
        Questions.sort(() => Math.random() - 0.5);

        console.log('üìö Usando dados de exemplo...');
    }
}

// Inicializar perguntas
fetchQuestions();

let currQuestion = 0;
let score = 0;

// Mostrar mensagem de carregamento
if (Questions.length === 0) {
    ques.innerHTML = `<h5>üîÑ Carregando perguntas...</h5>`;
}

// Fun√ß√£o para limpar op√ß√µes da API de forma inteligente
function cleanApiOption(option) {
    if (!option) return '';
    
    let cleaned = option;
    
    // Limpar apenas o "c=" no in√≠cio, preservando o resto do conte√∫do
    cleaned = cleaned.replace(/^c\s*=\s*/i, "");
    
    // Limpar outros padr√µes comuns da API que podem atrapalhar
    cleaned = cleaned.replace(/^[a-z]\s*=\s*/i, ""); // Remove qualquer letra seguida de "=" no in√≠cio
    
    // Remover espa√ßos extras no in√≠cio e fim
    cleaned = cleaned.trim();
    
    // Se a op√ß√£o ficou vazia ap√≥s a limpeza, retornar o original
    if (!cleaned) {
        return option;
    }
    
    return cleaned;
}

// Fun√ß√£o para carregar pergunta atual
async function loadQues() {
    const opt = document.getElementById("opt");
    const btn = document.getElementById("btn");
    
    if (currQuestion >= Questions.length) {
        loadScore();
        return;
    }
    
    let currentQuestion = Questions[currQuestion].question;
    
    // Decodificar HTML entities
    currentQuestion = decodeHtmlEntities(currentQuestion);
    
    // Traduzir pergunta
    currentQuestion = await translate(currentQuestion);
    
    // Exibir pergunta traduzida
    ques.innerHTML = `<h3>üå± Pergunta ${currQuestion + 1} de ${Questions.length}</h3><p>${currentQuestion}</p>`;
    
    // Limpar op√ß√µes anteriores
    opt.innerHTML = "";
    
    // Obter respostas
    const correctAnswer = Questions[currQuestion].correct_answer;
    const incorrectAnswers = Questions[currQuestion].incorrect_answers;
    const options = [correctAnswer, ...incorrectAnswers];
    
    // Embaralhar op√ß√µes
    options.sort(() => Math.random() - 0.5);
    
    // Criar op√ß√µes traduzidas
    for (let i = 0; i < options.length; i++) {
        const option = options[i];
        const choicesdiv = document.createElement("div");
        const choice = document.createElement("input");
        const choiceLabel = document.createElement("label");
        
        choice.type = "radio";
        choice.name = "answer";
        choice.value = option;
        choice.id = `option${i}`;
        
        // Traduzir op√ß√£o
        let cleanedOption = decodeHtmlEntities(option);
        
        // Fun√ß√£o para limpar op√ß√µes da API de forma inteligente
        cleanedOption = cleanApiOption(cleanedOption);
        
        const translatedOption = await translate(cleanedOption);


        choiceLabel.textContent = translatedOption;
        choiceLabel.htmlFor = `option${i}`;
        
        choicesdiv.appendChild(choice);
        choicesdiv.appendChild(choiceLabel);
        opt.appendChild(choicesdiv);
    }
    
    // Reativar bot√£o
    if (btn) {
        btn.disabled = false;
        btn.textContent = "ENVIAR RESPOSTA";
    }
    
    // Resetar flag de processamento
    isProcessing = false;
}

// Carregar primeira pergunta ap√≥s 2 segundos
setTimeout(async () => {
    if (Questions.length === 0) {
        ques.innerHTML = `<h5 style='color: red'>‚ùå N√£o foi poss√≠vel carregar as perguntas. Tente novamente!</h5>`;
    } else {
        await loadQues();
    }
}, 2000);

// Fun√ß√£o para carregar pontua√ß√£o final
async function loadScore() {
    const totalScore = document.getElementById("score");
    const percentage = ((score / Questions.length) * 100).toFixed(1);
    
    totalScore.innerHTML = `
        <h2>üèÜ Resultados Finais do EcoQuiz</h2>
        <p><strong>Pontua√ß√£o:</strong> ${score} de ${Questions.length}</p>
        <p><strong>Porcentagem de acerto:</strong> ${percentage}%</p>
        <h3>üìã Respostas Corretas:</h3>
    `;
    
    for (let i = 0; i < Questions.length; i++) {
        const el = Questions[i];
        const correctAnswer = await translate(decodeHtmlEntities(el.correct_answer));
        totalScore.innerHTML += `<p>${i + 1}. ${correctAnswer}</p>`;
    }
    
    // Mensagem baseada no acerto
    let message = '';
    if (percentage >= 90) {
        message = 'üåü EXCELENTE! Voc√™ √© um verdadeiro especialista em meio ambiente!';
    } else if (percentage >= 70) {
        message = 'üëç MUITO BOM! Voc√™ tem um bom conhecimento sobre o tema!';
    } else if (percentage >= 50) {
        message = 'üìö BOM! Continue estudando para melhorar ainda mais!';
    } else {
        message = 'üìñ ESTUDE MAIS! H√° muito a aprender sobre meio ambiente!';
    }
    
    totalScore.innerHTML += `<p><strong>üí¨ ${message}</strong></p>`;
    totalScore.innerHTML += `<p>üåç Obrigado por participar do EcoQuiz!</p>`;
}

// Fun√ß√£o para pr√≥xima pergunta
async function nextQuestion() {
    if (currQuestion < Questions.length - 1) {
        currQuestion++;
        await loadQues();
    } else {
        // Remover elementos da interface
        const opt = document.getElementById("opt");
        const btn = document.getElementById("btn");
        if (opt) opt.remove();
        if (btn) btn.remove();
        await loadScore();
    }
}

// Fun√ß√£o para verificar resposta - CORRIGIDA para prevenir m√∫ltiplos cliques
async function checkAns() {
    // Prevenir m√∫ltiplos cliques
    if (isProcessing) {
        return;
    }
    
    const selectedAns = document.querySelector('input[name="answer"]:checked');
    if (selectedAns) {
        // Marcar como processando
        isProcessing = true;
        
        const btn = document.getElementById("btn");
        if (btn) {
            btn.disabled = true;
            btn.textContent = "PROCESSANDO...";
        }
        
        const answerValue = selectedAns.value;
        const correctAnswer = Questions[currQuestion].correct_answer;
        
        // Verificar se a resposta est√° correta
        if (answerValue === correctAnswer) {
            score++;
            console.log('‚úÖ Resposta correta!');
        } else {
            console.log('‚ùå Resposta incorreta!');
        }
        
        // Mostrar feedback tempor√°rio
        const feedback = document.createElement('div');
        feedback.style.cssText = 'margin: 15px 0; padding: 15px; border-radius: 10px; font-weight: bold; animation: fadeIn 0.5s ease-in;';
        
        if (answerValue === correctAnswer) {
            feedback.style.backgroundColor = '#d4edda';
            feedback.style.color = '#155724';
            feedback.style.border = '1px solid #c3e6cb';
            feedback.textContent = '‚úÖ Parab√©ns! Resposta correta!';
        } else {
            feedback.style.backgroundColor = '#f8d7da';
            feedback.style.color = '#721c24';
            feedback.style.border = '1px solid #f5c6cb';
            const correctAnswerTranslated = await translate(decodeHtmlEntities(correctAnswer));
            feedback.textContent = `‚ùå Resposta incorreta! A resposta correta era: ${correctAnswerTranslated}`;
        }
        
        const opt = document.getElementById("opt");
        opt.appendChild(feedback);
        
        // Remover feedback ap√≥s 2 segundos e ir para pr√≥xima pergunta
        setTimeout(async () => {
            if (feedback.parentNode) {
                feedback.remove();
            }
            await nextQuestion();
        }, 2000);
        
    } else {
        alert("Por favor, selecione uma resposta.");
    }
}
